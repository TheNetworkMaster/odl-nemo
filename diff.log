diff --git a/nemo-api/src/main/yang/nemo-common.yang b/nemo-api/src/main/yang/nemo-common.yang
index cbccc32..072745f 100644
--- a/nemo-api/src/main/yang/nemo-common.yang
+++ b/nemo-api/src/main/yang/nemo-common.yang
@@ -1,32 +1,37 @@
 /*
- * Copyright (c) 2015  Huawei Technologies Co., Ltd. and others.  All rights reserved.
+ * Copyright (c) 2015 Huawei, Inc. and others. All rights reserved.
  *
  * This program and the accompanying materials are made available under the
  * terms of the Eclipse Public License v1.0 which accompanies this distribution,
  * and is available at http://www.eclipse.org/legal/epl-v10.html
  */
 
-module nemo-common{
-	yang-version 1;	
-	namespace "urn:opendaylight:params:xml:ns:yang:nemo:common";	
-	prefix "nemo-common";
-	
-	revision "2015-06-29" {
+module nemo-common {
+    yang-version 1;
+
+    namespace "urn:opendaylight:params:xml:ns:yang:nemo:common";
+    prefix "nemo-common";
+
+    description
+        "Common types and definitions for NEMO models";
+
+    revision "2015-10-10" {
         description
             "Initial revision.";
     }
-	
-	/**********************
-     * Base types
-    **********************/
-	typedef description {
-        description "A human-readable description for a object.";
+
+    // *********************
+    // * Base Types
+    // *********************
+    typedef description {
+        description
+            "A human-readable description for a object.";
         type string {
             length "1..4096";
         }
     }
-	
-	typedef name {
+
+    typedef name {
         description
             "A generic string name type. Must start with a letter";
         type string {
@@ -34,8 +39,8 @@ module nemo-common{
             length "1..256";
         }
     }
-	
-	// UUID type from ietf-yang-types@2013-07-15
+
+    // UUID type from ietf-yang-types@2013-07-15
     typedef uuid {
         type string {
             pattern '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-'
@@ -43,8 +48,8 @@ module nemo-common{
         }
         description
             "A Universally Unique IDentifier in the string representation
-             defined in RFC 4122.  The canonical representation uses
-             lowercase characters.
+             defined in RFC 4122. The canonical representation uses
+             lower case characters.
 
              The following is an example of a UUID in string
              representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6";
@@ -54,265 +59,179 @@ module nemo-common{
     }
 
     typedef unique-id {
+        description
+            "A globally unique identifier.";
         type uuid;
-        description "A globally unique identifier";
     }
-	
-	/*********************
-     * Unique IDs
-     *********************/	
-	typedef object-id {
+
+    // *********************
+    // * Unique IDs
+    // *********************
+    typedef object-id {
+        description
+            "A unique ID for a parameterized object.";
         type unique-id;
-        description "A unique ID for a parameterized object";
     }
-	
-	typedef node-definition-id {
-        type object-id;
-        description "A unique ID for a node definition.";
-    }
-	typedef node-instance-id {
-        type object-id;
-        description "A unique ID for a node instance.";
-    }		
-	
-	typedef connection-definition-id {
+
+    typedef node-id {
+        description
+            "A unique ID for a node.";
         type object-id;
-        description "A unique ID for a connection definition.";
     }
-	typedef connection-instance-id {
-        type object-id;
-        description "A unique ID for a connection instance.";
-    }		
-	
-	typedef flow-definition-id {
+
+    typedef connection-id {
+        description
+            "A unique ID for a connection.";
         type object-id;
-        description "A unique ID for a flow definition.";
     }
-	typedef flow-instance-id {
+
+    typedef flow-id {
+        description
+            "A unique ID for a flow.";
         type object-id;
-        description "A unique ID for a flow instance.";
     }
-	
-	typedef expected-definition-id {
+
+    typedef intent-id {
+        description
+            "A unique ID for an intent.";
         type unique-id;
-        description "A unique ID for an expected definition.";
     }
-	typedef expected-instance-id {
+
+    typedef user-id {
+        description
+            "A unique ID for a user.";
         type unique-id;
-        description "A unique ID for an expected instance.";
     }
-	
-	typedef avoid-definition-id {
+
+    typedef operation-id {
+        description
+            "A unique ID for an operation.";
         type unique-id;
-        description "A unique ID for an avoid definition.";
     }
-	typedef avoid-instance-id {
-        type unique-id;
-        description "A unique ID for an avoid instance.";
-    }
-	
-	typedef context-id {
-		type unique-id;
-        description "A unique ID for a context.";
-	}
-	
-	typedef intent-id {
+
+    typedef condition-segment-id {
+        description
+            "A unique ID for a segment of the condition in an operation.";
         type unique-id;
-        description "A unique ID for an intent.";
     }
-	
-	typedef user-id {
+
+    typedef query-condition-id {
+        description
+            "A unique ID for a condition of the advanced query.";
         type unique-id;
-        description "A unique ID for a user.";
-    }
-	
-	
-	
-	/*********************
-     * names
-     *********************/	
-	typedef object-name {
+    }
+
+    // *********************
+    // * Names
+    // *********************
+    typedef object-name {
+        description
+            "A name for a parameterized object";
         type name;
-        description "A name for a parameterized object";
     }
-	
-	typedef node-instance-name {
+
+    typedef node-name {
+        description
+            "A name for a node instance.";
         type object-name;
-        description "A name for a node instance.";
-    } 
-	
-	typedef connection-instance-name {
+    }
+
+    typedef connection-name {
+        description
+            "A name for a connection instance.";
         type object-name;
-        description "A name for a connection instance.";
-    } 	
-		 
-	typedef flow-instance-name {
+    }
+
+    typedef flow-name {
+        description
+            "A name for a flow instance.";
         type object-name;
-        description "A name for a flow instance.";
-    } 
-	
-	typedef node-property-name {
-        type name;
-        description "A name for a node property.";
-    } 
-	
-	typedef connection-property-name {
+    }
+
+    typedef  match-item-name {
+        description
+            "A name for a match item.";
         type name;
-        description "A name for a connection property.";
-    } 
+    }
 
-	typedef  match-item-name {
+    typedef property-name {
+        description
+            "A name for a property.";
         type name;
-        description "A name for a flow match item.";
     }
-	
-	typedef property-name {
+
+    typedef parameter-name {
+        description
+            "A name for a parameter.";
         type name;
-        description "A name for a property.";
     }
-	
-	typedef parameter-name {
+
+    typedef action-name {
+        description
+            "A name for an action.";
         type name;
-        description "A name for a parameter.";
     }
-	
-	typedef action-definition-name {
+
+    typedef condition-parameter-name {
+        description
+            "A name for a parameter of condition.";
         type name;
-        description "A name for an action definition.";
-    }	
-	typedef action-instance-name {
+    }
+
+    typedef user-name {
+        description
+            "A name for a user.";
         type name;
-        description "A name for an action instance.";
-    }	
-	typedef condition-definition-name {
+    }
+
+    typedef user-password {
+        description
+            "A password for a user.";
         type name;
-        description "A name for a condition definition.";
-    }
-	typedef condition-instance-name {
-		type name;
-        description "A name for a condition instance.";
-	}
-	typedef condition-parameter-name {
-		type name;
-        description "A name for a condition parameter.";
-	}
-	typedef constraint-definition-name {
+    }
+
+    typedef operation-name {
+        description
+            "A name for an operation.";
         type name;
-        description "A name for a constraint definition.";
-    }
-	typedef constraint-instance-name {
-		type name;
-        description "A name for a constraint instance.";
-	}
-	typedef constraint-parameter-name {
-		type name;
-        description "A name for a constraint parameter.";
-	}
-	
-
-    typedef data-name {
-		type name;
-		description "A name for an action data.";
-	}
-	
-	typedef context-name {
-		type name;
-		description "A name for an context";
-	}
-	
-	typedef intent-name {
+    }
+
+    typedef query-condition-name {
+        description
+            "A name for a query with condition.";
         type name;
-        description "A name for an intent.";
     }
-	typedef user-name {
+
+    typedef user-role-name {
+        description
+            "A role name for a user.";
         type name;
-        description "A name for a user.";
     }
-	typedef expected-instance-name {
+
+    typedef user-role-description {
+        description
+            "It describes the role characteristic and responsibility range.";
+        type string;
+    }
+
+    // *********************
+    // * Types
+    // *********************
+    typedef node-type {
+        description
+            "The type for a node.";
         type name;
-        description "A name for an expected instance.";
     }
-	typedef avoid-instance-name {
+
+    typedef connection-type {
+        description
+            "The type for a connection.";
         type name;
-        description "A name for an avoid instance.";
-    }
-	
-	
-	
-	/*********************
-     * types
-     *********************/	
-	typedef node-definition-type {
-		type name;
-	    description "A type for a node."; 
-	}
-	typedef connection-definition-type {
-		type name;
-	    description "A type for a connection."; 
-	}
-	typedef flow-definition-type {
-		type name;
-	    description "A type for a flow."; 
-	}	
-	typedef node-instance-type  {
-		type name;
-	    description "A type for a node instance."; 
-	}	
-	typedef connection-instance-type  {
-		type name;
-	    description "A type for a connection instance."; 
-	}
-	typedef flow-instance-type {
-		type name;
-		description "A type for a flow instance."; 
-	}
+    }
 
+    typedef flow-type {
+        description
+            "The type for a flow.";
+        type name;
+    }
 }
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
- 
\ No newline at end of file
diff --git a/nemo-api/src/main/yang/nemo-intent.yang b/nemo-api/src/main/yang/nemo-intent.yang
index 21760a0..91876aa 100644
--- a/nemo-api/src/main/yang/nemo-intent.yang
+++ b/nemo-api/src/main/yang/nemo-intent.yang
@@ -1,136 +1,395 @@
 /*
- * Copyright (c) 2015  Huawei Technologies Co., Ltd. and others.  All rights reserved.
+ * Copyright (c) 2015 Huawei, Inc. and others. All rights reserved.
  *
  * This program and the accompanying materials are made available under the
  * terms of the Eclipse Public License v1.0 which accompanies this distribution,
  * and is available at http://www.eclipse.org/legal/epl-v10.html
  */
- 
+
 module nemo-intent {
-	yang-version 1;	
-	namespace "urn:opendaylight:params:xml:ns:yang:nemo:intent";	
-	prefix "nemo-intent";
-	
-	import nemo-common {prefix nemo-common;}
-	import nemo-object {prefix nemo-object;}
-	import nemo-operation {prefix nemo-operation;}
-	import nemo-result {prefix nemo-result;}
-	
-	revision "2015-06-29" {
+    yang-version 1;
+
+    namespace "urn:opendaylight:params:xml:ns:yang:nemo:intent";
+    prefix "nemo-intent";
+
+    import nemo-common {prefix nemo-common;}
+    import nemo-object {prefix nemo-object;}
+    import nemo-operation {prefix nemo-operation;}
+    import nemo-user {prefix nemo-user;}
+
+    revision "2015-10-10" {
         description
             "Initial revision.";
     }
-		
-	grouping intent-instance {
-		description "";
-		leaf intent-id {
-			description "A unique ID for the intent";
-			type nemo-common:intent-id;			
-			mandatory true;
-		}	
-		leaf intent-name {
-			description "A user-visible name for the intent";
-			type nemo-common:intent-name;
-		}	
-		container objects {
-			description "";
-			list node {
-				key "node-id";
-				uses nemo-object:node-instance;
-			}			
-			list connection {
-				key "connection-id";
-				uses nemo-object:connection-instance;
-			}				
-			list flow {
-				key "flow-id";
-				uses nemo-object:flow-instance;
-			}							
-		}
-		
-		container operation {
-			leaf apply-on-object {
-				type nemo-common:object-id;
-				mandatory true;
-			}		
-			leaf priority{
-				type int64;
-				default 1;
-			}
-			uses nemo-operation:condition-instance;
-			uses nemo-operation:action-instance;
-			uses nemo-operation:constraint-instance;			
-		}
-		
-		container result{
-			leaf result-to-object {
-				type nemo-common:object-id;
-				mandatory true;
-			}		
-			leaf priority{
-				type int64;
-				default 1;
-			}
-			choice result-mode {
-				mandatory true;
-				case expected-case {
-					uses nemo-result:expected-instance;
-				}
-				case avoid-case{
-					uses nemo-result:avoid-instance;
-				}		
-			}						
-		}	
-		container contexts{
-			list context {
-				key "context-id";
-				leaf context-id {
-					type nemo-common:context-id;
-					mandatory true;
-				}
-				leaf context-name{
-					type nemo-common:context-name;
-					mandatory true;
-				}
-			}			
-		}
-	}
-		
-	container users {
-		description "The list of all known users";
-		list user {
-            description "";
+
+    grouping user-intent {
+        description
+            "User intent refers to a purpose in getting an ultimate result
+             or performing some specific operation on some objects.";
+
+        container objects {
+            description
+                "The element could be operated and managed by users.
+                 It inludes resources to construct users' virtual network,
+                 and the services in this network.In NEMO project, it is
+                 abstracted into node, connection and flow";
+
+            list node {
+                key "node-id";
+                uses nemo-object:node-instance;
+            }
+
+            list connection {
+                key "connection-id";
+                uses nemo-object:connection-instance;
+            }
+
+            list flow {
+                key "flow-id";
+                uses nemo-object:flow-instance;
+            }
+        }
+
+        container operations {
+            description
+                "The operation is to dynamically adjust the behavior of network,
+                 and it is applied on objects, that is, node, connection and flow";
+
+            list operation {
+                key "operation-id";
+                uses nemo-operation:operation-instance;
+            }
+        }
+
+        container results {
+            // TBD
+        }
+    }
+
+    container users {
+        description
+            "The list of all known users";
+
+        list user {
+            description
+                "A user is an administrative domain which is
+                 logically separated from other users, and each
+                 intent is specified by a particular user.";
+
             key "user-id";
-            leaf user-id {
-                description "A unique ID for the user";             
-                type nemo-common:user-id;
-				mandatory true;
-            }
-            leaf user-name {
-                description "A user-visible name for the user";
-                type nemo-common:user-name;
-				mandatory false;
-            }		
-			list intent{
-				key "intent-id";
-				uses intent-instance;
-				min-elements 1;
-			}
-		}		
-	}
-	
-	rpc register-node-instance {
-	    description "";
-		input {
-			uses nemo-object:node-instance;
-		}
-	}
-	
-	rpc unregister-node-instance {
-	    description "";
-		input {
-			uses nemo-object:node-instance;
-		}
-	}
-		
-}
\ No newline at end of file
+            uses nemo-user:user-instance;
+            uses user-intent;
+        }
+    }
+
+    container query-condition-definitions {
+        description
+            "Contains the definitions for all advanced query, which means
+             they are the query with conditions supported by the NEMO engine.
+             User will fetch all results which meet the condition.";
+
+        list query-condition-definition {
+            description
+                "Define the query with condition. For example, user may
+                 intent to query all connection's name whose utilization is
+                 beyond 80%. That is a query with condition.";
+
+            key "query-condition-name query-intent-type";
+            leaf query-condition-name {
+                description
+                    "A user-visible name for the query condition definition.
+                     The query condition name is usually to specify the
+                     attribute or property of some kind of intent.
+                     For the above example, the query-condition-name is utility.";
+                type nemo-common:query-condition-name;
+                mandatory true;
+            }
+
+            leaf query-intent-type {
+                description
+                    "The target for the query, and its attributes will be checked out
+                     if meet the condition. In the above example, connection is the
+                     target. So, connection will be the query-intent-type here.";
+                type enumeration {
+                    enum node;
+                    enum connection;
+                    enum flow;
+                    enum operation;
+                    enum result;
+                }
+            }
+
+            leaf query-condition-value-type {
+                description
+                    "The type of the target value for the query condition.
+                     For the above example, the target-value is 80(%),
+                     so the query-condition-value-type will be int.";
+                default string;
+                type enumeration {
+                    enum string {
+                        description
+                            "A string-valued target value.";
+                    }
+                    enum int {
+                        description
+                            "An integer-valued target value.";
+                    }
+                    enum range {
+                        description
+                            "An integer-range target value.";
+                    }
+                }
+            }
+
+            container query-condition-match-patterns {
+                description
+                    "The relationship between the value of query-condition-name
+                     and query-condition-target-value. If an intent's attribute
+                     or property specified by the query condition name matches
+                     to the target value by the match pattern, this intent meets
+                     the condition. For the above example, the condition's
+                     query-condition-match-patterns could be less-than, not-less-than,
+                     equal, not-equal, greater-than, not-greater-than, between.";
+
+                leaf-list query-condition-match-pattern {
+                    type enumeration {
+                        enum less-than;
+                        enum not-less-than;
+                        enum equal;
+                        enum not-equal;
+                        enum greater-than;
+                        enum not-greater-than;
+                        enum between;
+                    }
+                }
+            }
+        }
+    }
+
+    grouping common-rpc-result {
+        description
+            "Common return result for all defined RPCs.";
+
+        leaf result-code {
+            description
+                "Result code which is convenient for processing in a program.";
+            type enumeration {
+                enum ok {
+                    description
+                        "The invoked RPC was executed successfully";
+                }
+                enum error {
+                    description
+                        "There's an error while executing the RPC";
+                }
+            }
+        }
+
+        leaf message {
+            description
+                "A human-readable message for an error or exception";
+            type string;
+        }
+    }
+
+    grouping query-condition-instance {
+        description
+            "A query condition instance generated according to
+             a specified query condition definition.";
+
+        leaf query-condition-id {
+            description
+                "A unique ID for a query condition instance.";
+            type nemo-common:query-condition-id;
+            mandatory true;
+        }
+
+        leaf query-condition-name {
+            description
+                "The name of the query condition definition.";
+            type nemo-common:query-condition-name;
+            mandatory true;
+        }
+
+        leaf query-intent-type {
+            description
+                "The type of the intents that the user wants to query from through
+                 the condition instance.";
+            type enumeration {
+                enum node;
+                enum connection;
+                enum flow;
+                enum operation;
+                enum result;
+            }
+        }
+
+        leaf query-condition-match-pattern {
+            description
+                "The match pattern the condition instance will use.";
+            type enumeration {
+                enum less-than;
+                enum not-less-than;
+                enum equal;
+                enum not-equal;
+                enum greater-than;
+                enum not-greater-than;
+                enum between;
+            }
+        }
+
+        container query-condition-target-value {
+            description
+                "The target value used to compare with the attribute
+                 or property of the intents.";
+
+            leaf string-value {
+                type string;
+            }
+
+            leaf int-value {
+                type int64;
+            }
+
+            container range-value {
+                leaf min {
+                    type int64;
+                    mandatory true;
+                }
+
+                leaf max {
+                    type int64;
+                    mandatory true;
+                }
+            }
+        }
+    }
+
+    rpc register-user {
+        description
+            "Register a user to the user repository.";
+
+        input {
+            uses nemo-user:user-instance;
+        }
+
+        output {
+            uses common-rpc-result;
+        }
+    }
+
+    rpc begin-transaction {
+        description
+            "Begin a transaction for the user";
+
+        input {
+            uses nemo-user:user-instance;
+        }
+
+        output {
+            uses common-rpc-result;
+        }
+    }
+
+    rpc end-transaction {
+        description
+            "Commit the user's current transaction";
+
+        input {
+            uses nemo-user:user-instance;
+        }
+
+        output {
+            uses common-rpc-result;
+        }
+    }
+
+    rpc language-style-nemo-request {
+        description
+            "Create, update or delete an intent of a user through an NEMO statement";
+
+        input {
+            uses nemo-user:user-instance;
+
+            leaf nemo-statement {
+                type string;
+            }
+        }
+
+        output {
+            uses common-rpc-result;
+        }
+    }
+
+    rpc structure-style-nemo-update {
+        description
+            "Create or update all or a part of the user's intents,
+             which are described as json or xml format.";
+
+        input {
+            uses nemo-user:user-instance;
+            uses user-intent;
+        }
+
+        output {
+            uses common-rpc-result;
+        }
+    }
+
+    rpc structure-style-nemo-delete {
+        description
+            "Delete some intents of a user from the user repository";
+
+        input {
+            uses nemo-user:user-instance;
+
+            container objects {
+                leaf-list node {
+                    type nemo-common:node-id;
+                }
+
+                leaf-list connection {
+                    type nemo-common:connection-id;
+                }
+
+                leaf-list flow {
+                    type nemo-common:flow-id;
+                }
+            }
+
+            container operations {
+                leaf-list operation {
+                    type nemo-common:operation-id;
+                }
+            }
+
+            container results {
+                // TBD
+            }
+        }
+
+        output {
+            uses common-rpc-result;
+        }
+    }
+
+    rpc advanced-nemo-query {
+        description
+            "Query some intents of a user from the user repository
+             according to several advanced query conditions.";
+
+        input {
+            uses nemo-user:user-instance;
+
+            list query-condition {
+                key "query-condition-id";
+                uses query-condition-instance;
+            }
+        }
+
+        output {
+            uses common-rpc-result;
+            uses user-intent;
+        }
+    }
+}
diff --git a/nemo-api/src/main/yang/nemo-object.yang b/nemo-api/src/main/yang/nemo-object.yang
index 30500fd..347406d 100644
--- a/nemo-api/src/main/yang/nemo-object.yang
+++ b/nemo-api/src/main/yang/nemo-object.yang
@@ -1,331 +1,405 @@
 /*
- * Copyright (c) 2015  Huawei Technologies Co., Ltd. and others.  All rights reserved.
+ * Copyright (c) 2015 Huawei, Inc. and others. All rights reserved.
  *
  * This program and the accompanying materials are made available under the
  * terms of the Eclipse Public License v1.0 which accompanies this distribution,
  * and is available at http://www.eclipse.org/legal/epl-v10.html
  */
 
-module nemo-object{
-	yang-version 1;		
-	namespace "urn:opendaylight:params:xml:ns:yang:nemo:object";	
-	prefix "nemo-object";
-	
-	import nemo-common {prefix nemo-common;}
-	
-	revision "2015-06-29" {
+module nemo-object {
+    yang-version 1;
+
+    namespace "urn:opendaylight:params:xml:ns:yang:nemo:object";
+    prefix "nemo-object";
+
+    import nemo-common {prefix nemo-common;}
+
+    revision "2015-10-10" {
         description
             "Initial revision.";
     }
-		
-	grouping property-definition {	
-		list property {
-            description "";
-            key "name";
-            leaf name {
-                description "A user-visible name for the property";
+
+    grouping property-definitions {
+        list property-definition {
+            description
+                "The property definitions for the type of node or connection.";
+
+            key "property-name";
+            leaf property-name {
+                description
+                    "A user-visible and unique name for the property.";
                 type nemo-common:property-name;
                 mandatory true;
             }
-            leaf value-type {
-                description "The type of the property";
+
+            leaf property-value-type {
+                description
+                    "The type of the property value.";
                 default string;
                 type enumeration {
                     enum string {
-                        description "A string-valued property";
+                        description
+                            "An string-valued property.";
                     }
                     enum int {
-                        description "An integer-valued property";
+                        description
+                            "An integer-valued property.";
                     }
                     enum range {
-                        description "An integer-range property";
+                        description
+                            "An integer-range property.";
                     }
                 }
             }
+
             leaf is-required {
-                description "Specify whether the property is
-                             required for object.";
+                description
+                    "Specify whether the property is required for the object.";
                 default optional;
                 type enumeration {
                     enum required {
-                        description "The property is required";
+                        description
+                            "The property is required";
                     }
                     enum optional {
-                        description "The property is optional";
+                        description
+                            "The property is optional";
                     }
                 }
             }
-        }				
-	}				
-	container node-definitions{
-		list node-definition{
-			description "";
-			key "id";
-			leaf id {
-				description "A unique ID for a kind of node definition";
-			    type nemo-common:node-definition-id;
-				mandatory true;
-		    } 
-			leaf node-type{
-				description "A user-readable description";
-				type nemo-common:node-definition-type;
-				mandatory true;						
-			}
-			uses property-definition;				
-		}		
-	}		
-	container connection-definitions{
-		list connection-definition{
-			key "id";
-			leaf id {
-				description "A unique ID for a kind of connection definition";
-			    type nemo-common:connection-definition-id;
-				mandatory true;
-		    } 
-			leaf connection-type{
-				description "A user-readable description";
-				type nemo-common:connection-definition-type;
-				mandatory true;						
-			}
-			uses property-definition;			
-		}	
-	}
-	
-	
-	grouping match-item-definition{
-	
-		list match-item {
-            description "";
-            key "name";
-            leaf name {
-                description "A user-visible name for the match-item";
+
+            leaf is-read-only {
+                description
+                    "Specify whether the property is read-only for object.";
+                default write-read;
+                type enumeration {
+                    enum write-read {
+                        description
+                            "The property can be read and written.";
+                    }
+                    enum read-only {
+                        description
+                            "The property is read-only.";
+                    }
+                }
+            }
+        }
+    }
+
+    container node-definitions {
+        list node-definition {
+            description
+                "Define new node model/type which can be used in other places,
+                 and include node type name and its property.";
+
+            key "node-type";
+            leaf node-type {
+                description
+                    "A user-visible and unique identifier for the node type.";
+                type nemo-common:node-type;
+                mandatory true;
+            }
+
+            uses property-definitions;
+        }
+    }
+
+    container connection-definitions {
+        list connection-definition {
+            description
+                "Define new connection model/type which can be used in other places,
+                 and include connection type name and its property.";
+
+            key "connection-type";
+            leaf connection-type {
+                description
+                    "A user-visible and unique identifier for the connection type.";
+                type nemo-common:connection-type;
+                mandatory true;
+            }
+
+            uses property-definitions;
+        }
+    }
+
+    container match-item-definitions {
+        list match-item-definition {
+            description
+                "Define the match item which uses to match the flow.";
+
+            key "match-item-name";
+            leaf match-item-name {
+                description
+                    "A user-visible and unique name for the match item.";
                 type nemo-common:match-item-name;
                 mandatory true;
             }
-            leaf value-type {
-                description "The type of the match item";
+
+            leaf match-item-value-type {
+                description
+                    "The value type of the match item.";
                 default string;
                 type enumeration {
                     enum string {
-                        description "A string-valued match item";
+                        description
+                            "A string-valued match item.";
                     }
                     enum int {
-                        description "An integer-valued match item";
+                        description
+                            "An integer-valued match item.";
                     }
                     enum range {
-                        description "An integer-range match item";
+                        description
+                            "An integer-range match item.";
                     }
                 }
             }
-            leaf is-required {
-                description "Specify whether the match item is required 
-				             for the flow.";
-                default optional;
-                type enumeration {
-                    enum required {
-                        description "The  match item is required";
-                    }
-                    enum optional {
-                        description "The  match item is optional";
-                    }
+        }
+    }
+
+    container flow-property-definitions {
+        description
+            "Contains the property definitions for the flow.";
+
+        uses property-definitions;
+    }
+
+    grouping property-instance {
+        description
+            "The property instance and its associated metadata.";
+
+        leaf property-name {
+            description
+                "The name for the property which can be seen as a unique
+                 identifier of the property.";
+            type nemo-common:property-name;
+            mandatory true;
+        }
+
+        container property-values {
+            description
+                "The value list of the property.";
+
+            list string-value {
+                key "value order";
+                leaf value {
+                    type string;
+                }
+
+                leaf order {
+                    type uint32;
                 }
             }
-        }				
-	}	
-    container flow-definitions{
-		list flow-definition{
-			key "id";
-			leaf id {
-				description "A unique ID for a kind of flow definition";
-			    type nemo-common:flow-definition-id;
-				mandatory true;
-		    } 
-			leaf flow-type{
-				description "A user-readable description";
-				type nemo-common:flow-definition-type;
-				mandatory true;						
-			}
-			uses match-item-definition;				
-		}	
-	}
-	
-	grouping node-property-instance{
-		list property {
-            key "name";
-            leaf name {
-				type nemo-common:node-property-name;
-                mandatory true;
-            }
-            leaf string-value {
-                type string;
-            }
-            leaf int-value {
-                type int64;
-            }
-            container range-value {
-                leaf min {
+
+            list int-value {
+                key "value order";
+                leaf value {
                     type int64;
-                    mandatory true;
                 }
-                leaf max {
-                    type int64;
-                    mandatory true;
+
+                leaf order {
+                    type uint32;
                 }
             }
-        }	
-	}			
-	grouping node-instance{
-		description "";
-		leaf node-id {
-			description "A unique ID for the node instance";
-			type nemo-common:node-instance-id;
-			mandatory true;
-		}
-		leaf node-name {
-			description
-				"A user-visible name for the node definition";
-			type nemo-common:node-instance-name;
-		}
-		leaf node-type {
-			type nemo-common:node-instance-type;
-			mandatory true;			
-		}
-		container subnodes{				
-			leaf-list  subnode-id{
-				type nemo-common:node-instance-id;				
-			}			
-		}
-		container property{
-			uses node-property-instance;			
-		}		
-	}
-	
-	grouping connection-property-instance{
-		list property {
-            key "name";
-            leaf name {
-				type nemo-common:connection-property-name;
-                mandatory true;
-            }
-            leaf string-value {
-                type string;
-            }
-            leaf int-value {
-                type int64;
-            }
+
             container range-value {
                 leaf min {
                     type int64;
                     mandatory true;
                 }
+
                 leaf max {
                     type int64;
                     mandatory true;
                 }
             }
-        }	
-	}			
-	grouping connection-instance {
-		description "";
-		leaf connection-id {
-			description "A unique ID for the connection instance";
-			type nemo-common:connection-instance-id;
-			mandatory true;
-		}
-		leaf connection-name {
-			description  "A user-visible name for the connection instance";
-			type nemo-common:connection-instance-name;
-			mandatory false;
-		}
-		leaf connection-type {
-			type nemo-common:connection-instance-type;
-			mandatory true;			
-		}
-		container endnodes{
-			list one-end{
-				key "node-id";
-				leaf node-id{
-					type nemo-common:node-instance-id;						
-				}
-				min-elements 1;
-			}			
-			list the-other-end{
-				key "node-id";
-				leaf node-id{
-					type nemo-common:node-instance-id;
-				}
-				min-elements 1;				
-			}			
-		}
-		container property{
-			uses connection-property-instance;			
-		}					
-	}
-		
-	grouping match-item-instance{
-		list match-item {
-            key "name";
-            leaf name {
-				type string;
-                mandatory true;
+        }
+    }
+
+    grouping node-instance {
+        description
+            "It represents the node instance and its metadata.
+             A node represents the functions a network node may provide in a
+             network such as network services,or a group of network elements.";
+
+        leaf node-id {
+            description
+                "A unique ID for a node instance";
+            type nemo-common:node-id;
+            mandatory true;
+        }
+
+        leaf node-name {
+            description
+                "A user-visible and unique name for a node instance.";
+            type nemo-common:node-name;
+            mandatory true;
+        }
+
+        leaf node-type {
+            description
+                "A user-visible and unique type identifier for a node instance.";
+            type nemo-common:node-type;
+            mandatory true;
+        }
+
+        list sub-node {
+            description
+                "Represents the sub-nodes which have been included
+                 by the node instance logically.";
+
+            key "node-id";
+            leaf node-id {
+                description
+                    "A unique ID for a node instance.";
+                type nemo-common:node-id;
+            }
+
+            leaf order {
+                description
+                    "Specify the order of the node in a sequence node list.";
+                type uint32;
+            }
+        }
+
+        list property {
+            description
+                "The property list of a node instance.";
+
+            key "property-name";
+            uses property-instance;
+        }
+    }
+
+    grouping connection-instance {
+        description
+            "It represents the connection instance and its metadata.
+             The Connection describes the resource between node entities.
+             This connection is not limited to any physical link, but just
+             expresses the communication capacity between nodes.";
+
+        leaf connection-id {
+            description
+                "A unique ID for a connection instance.";
+            type nemo-common:connection-id;
+            mandatory true;
+        }
+
+        leaf connection-name {
+            description
+                "A user-visible and unique name for a connection instance.";
+            type nemo-common:connection-name;
+            mandatory true;
+        }
+
+        leaf connection-type {
+            description
+                "A user-visible and unique type identifier for a connection instance.";
+            type nemo-common:connection-type;
+            mandatory true;
+        }
+
+        list end-node {
+            description
+                "Represents the nodes which will be connected by connection.
+                 At least two nodes in the list.";
+
+            key "node-id";
+            leaf node-id {
+                description
+                    "A unique ID for a node instance.";
+                type nemo-common:node-id;
+            }
+
+            leaf order {
+                description
+                    "Specify the order of the node in a sequence node list";
+                type uint32;
             }
+
+            min-elements 2;
+        }
+
+        list property {
+            description
+                "The property list of a connection instance.";
+
+            key "property-name";
+            uses property-instance;
+        }
+    }
+
+    grouping match-item-instance {
+        description
+            "Represents the match item and its metadata.";
+
+        leaf match-item-name {
+            description
+                "A name for a match item.";
+            type nemo-common:match-item-name;
+            mandatory true;
+        }
+
+        container match-item-value {
+            description
+                "The value of a match item.";
+
             leaf string-value {
                 type string;
             }
+
             leaf int-value {
                 type int64;
             }
+
             container range-value {
                 leaf min {
                     type int64;
                     mandatory true;
                 }
+
                 leaf max {
                     type int64;
                     mandatory true;
                 }
             }
-        }	
-	}
-	grouping has-direction {
-        description "Object that have a directionality.";	
-        leaf direction {
-            default bidirectional;
-            type enumeration {
-                enum in {
-                    description
-                        "Applies to flow into provider node";
-                }
-                enum out {
-                    description
-                        "Applies to flow out of provider node";
-                }
-                enum bidirectional {
-                    description
-                        "Applies to flow in both directions";
-                }
-            }
         }
-    }	
-	grouping flow-instance{
-		leaf flow-id {
-			description "A unique ID for the flow instance";
-			type nemo-common:flow-instance-id;
-			mandatory true;
-		}
-		leaf flow-name {
-			description "A user-visible name for the flow instance";
-			type nemo-common:flow-instance-name;
-			mandatory false;
-		}
-		leaf flow-type {
-			type nemo-common:flow-instance-type;
-			mandatory true;			
-		}
-		container match {
-			uses has-direction;
-			uses match-item-instance;
-		}
-	}	
-	
+    }
+
+    grouping flow-instance {
+        description
+            "Represents the flow instance and its metadata.
+             The flow refers to the traffic in network which describes
+             data packets have some certain characters.";
+
+        leaf flow-id {
+            description
+                "A unique ID for a flow instance.";
+            type nemo-common:flow-id;
+            mandatory true;
+        }
+
+        leaf flow-name {
+            description
+                "A user-visible and unique name for a flow instance.";
+            type nemo-common:flow-name;
+            mandatory true;
+        }
+
+        list match-item {
+            description
+                "The match item list of a flow instance.";
+
+            key "match-item-name";
+            uses match-item-instance;
+        }
+
+        list property {
+            description
+                "The property list of a flow instance.";
+
+            key "property-name";
+            uses property-instance;
+        }
+    }
 }
diff --git a/nemo-api/src/main/yang/nemo-operation.yang b/nemo-api/src/main/yang/nemo-operation.yang
index 219b192..8b4083a 100644
--- a/nemo-api/src/main/yang/nemo-operation.yang
+++ b/nemo-api/src/main/yang/nemo-operation.yang
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2015  Huawei Technologies Co., Ltd. and others.  All rights reserved.
+ * Copyright (c) 2015 Huawei, Inc. and others. All rights reserved.
  *
  * This program and the accompanying materials are made available under the
  * terms of the Eclipse Public License v1.0 which accompanies this distribution,
@@ -7,201 +7,288 @@
  */
 
 module nemo-operation {
+    yang-version 1;
 
-	yang-version 1;	
-	namespace "urn:opendaylight:params:xml:ns:yang:nemo:operation";	
-	prefix "nemo-operation";
-	
-	import nemo-common {prefix nemo-common;}
-	
-	revision "2015-06-29" {
+    namespace "urn:opendaylight:params:xml:ns:yang:nemo:operation";
+    prefix "nemo-operation";
+
+    import nemo-common {prefix nemo-common;}
+
+    revision "2015-10-10" {
         description
             "Initial revision.";
     }
-	
-	grouping parameter-definition {
-		leaf name {
-			description "A user-visible name for parameter";
-			type nemo-common:parameter-name;
-			mandatory true;
-		}	
-		leaf type {
-			description "The type of the parameter";
-			default string;
-			type enumeration {
-				enum string {
-					description "A string-valued parameter";
-				}
-				enum int {
-					description "An integer-valued parameter";
-				}
-				enum range {
-					description "An integer-range parameter";
-				}
-			}
-		}	
-		leaf is-required {
-			description "Specify whether the parameter is required ";
-			default optional;
-			type enumeration {
-				enum required {
-					description "The parameter is required";
-				}
-				enum optional {
-					description "The parameter is optional";
-				}
-			}
-		}	
-	}
-	
-	
-	container action-definitions {
-	    list action-definition {		
-			key "action-name";
-			leaf action-name {
-				description "A name for the action definition";
-				type nemo-common:action-definition-name;
-			    mandatory true;			
-		    }			
-	        list data {
-				description
-					"data for the action that can be passed in.";
-				key "name";			
-				uses parameter-definition;		
-		    }		
-	    }
-	}	
-	grouping action-parameter-instance{
-		leaf data-name {
-			type nemo-common:data-name;
-			mandatory true;
-		}
-		leaf string-value {
-			type string;
-		}
-		leaf int-value {
-			type int64;
-		}
-		container range-value {
-			leaf min {
-				type int64;
-				mandatory true;
-			}
-			leaf max {
-				type int64;
-				mandatory true;
-			}
-		}	
-	}	
-	grouping action-instance{
-		description " ";
-		leaf action-name{
-			type nemo-common:action-instance-name;
-			mandatory true;
-		}
-		list data {
-			key "data-name";
-			uses action-parameter-instance;			
-		}		
-	}
-		
-	container condition-definitions {
-		list condition-definition{
-			key "condition-name";
-			leaf condition-name{
-				type nemo-common:condition-definition-name;
-				mandatory true;		
-			}
-			list condition-parameter{
-				key "name";
-				uses parameter-definition;
-				min-elements 1;
-			}	
-		}
-	}
-	grouping conditon-parameter-instance{
-		leaf parameter-name {
-		    type nemo-common:condition-parameter-name;
-			mandatory true;
-		}
-		leaf string-value {
-			type string;
-		}
-		leaf int-value {
-			type int64;
-		}
-		container range-value {
-			leaf min {
-				type int64;
-				mandatory true;
-			}
-			leaf max {
-				type int64;
-				mandatory true;
-			}
-		}	
-	}	
-	grouping condition-instance {
-		description " ";
-		leaf condition-name{
-			type nemo-common:condition-instance-name;
-			mandatory true;				
-		}	
-		list condition-parameter{
-			key "parameter-name";
-			uses conditon-parameter-instance;
-			min-elements 1;
-		}
-	}
-	
-	
-	container constraint-definitions {
-		list constraint-definition{
-			key "constraint-name";
-			leaf constraint-name{
-				type nemo-common:constraint-definition-name;
-				mandatory true;		
-			}
-			list constraint-parameter{
-				key "name";
-				uses parameter-definition;
-				min-elements 1;
-			}	
-		}
-	}
-	grouping constraint-parameter-instance{
-		leaf parameter-name {
-			type nemo-common:constraint-parameter-name;
-			mandatory true;
-		}
-		leaf string-value {
-			type string;
-		}
-		leaf int-value {
-			type int64;
-		}
-		container range-value {
-			leaf min {
-				type int64;
-				mandatory true;
-			}
-			leaf max {
-				type int64;
-				mandatory true;
-			}
-		}	
-	}	
-	grouping constraint-instance {
-		description " ";
-		leaf constraint-name{
-			type nemo-common:constraint-instance-name;
-			mandatory true;				
-		}	
-		list constraint-parameter{
-			key "parameter-name";
-			uses constraint-parameter-instance;
-			min-elements 1;
-		}
-	}
-	
-}
\ No newline at end of file
+
+    container condition-parameter-definitions {
+        list condition-parameter-definition {
+            description
+                "Defines the condition parameter with its metadata.";
+
+            key "parameter-name";
+            leaf parameter-name {
+                description
+                    "A name for the condition parameter.";
+                type nemo-common:parameter-name;
+                mandatory true;
+            }
+
+            leaf parameter-value-type {
+                description
+                    "A type of value for the condition parameter.";
+                type enumeration {
+                    enum string {
+                        description
+                            "A string-valued parameter.";
+                    }
+                    enum int {
+                        description
+                            "An integer-valued parameter.";
+                    }
+                    enum range {
+                        description
+                            "An integer-range parameter.";
+                    }
+                }
+            }
+
+            container parameter-match-patterns {
+                description
+                    "Defines the match patterns of the condition parameter.";
+
+                leaf-list parameter-match-pattern {
+                    type enumeration {
+                        enum less-than;
+                        enum not-less-than;
+                        enum equal;
+                        enum not-equal;
+                        enum greater-than;
+                        enum not-greater-than;
+                        enum between;
+                        enum periodical;
+                    }
+                }
+            }
+        }
+    }
+
+    container action-definitions {
+        list action-definition {
+            description
+                "Defines the actions which will be supported by the NEMO project.";
+
+            key "action-name";
+            leaf action-name {
+                description
+                    "A name for the action definition.";
+                type nemo-common:action-name;
+                mandatory true;
+            }
+
+            leaf parameter-value-type {
+                description
+                    "The type of the action parameter.";
+                default string;
+                type enumeration {
+                    enum string {
+                        description
+                            "A string-valued parameter.";
+                    }
+                    enum int {
+                        description
+                            "An integer-valued parameter.";
+                    }
+                    enum range {
+                        description
+                            "An integer-range parameter.";
+                    }
+                }
+            }
+        }
+    }
+
+    grouping condition-instance {
+        description
+            "Specific a instance of condition whose metadata has been filled in.";
+
+        list condition-segment {
+            description
+                "The segment entities will be composed into a whole condition entity.
+                 Each segment will be a sub expression of the condition.";
+
+            key "condition-segment-id";
+            leaf condition-segment-id {
+                description
+                    "A unique ID for a condition segment.";
+                type nemo-common:condition-segment-id;
+                mandatory true;
+            }
+
+            leaf condition-parameter-name {
+                description
+                    "A name for a conditon parameter.";
+                type nemo-common:condition-parameter-name;
+            }
+
+            leaf condition-parameter-match-pattern {
+                description
+                    "The operator for the condition parameter and it's target value.";
+                type enumeration {
+                    enum less-than;
+                    enum not-less-than;
+                    enum equal;
+                    enum not-equal;
+                    enum greater-than;
+                    enum not-greater-than;
+                    enum between;
+                    enum periodical;
+                }
+            }
+
+            container condition-parameter-target-value {
+                description
+                    "The target value of condition parameter.";
+
+                leaf string-value {
+                    type string;
+                }
+
+                leaf int-value {
+                    type int64;
+                }
+
+                container range-value {
+                    leaf min {
+                        type int64;
+                        mandatory true;
+                    }
+
+                    leaf max {
+                        type int64;
+                        mandatory true;
+                    }
+                }
+            }
+
+            leaf precursor-relation-operator {
+                description
+                    "The logical operator between current segment and the next segment.";
+                type enumeration {
+                    enum none;
+                    enum and;
+                    enum or;
+                    enum not;
+                }
+            }
+
+            leaf order {
+                description
+                    "The order of the segment in the whole condition entity.";
+                type uint32;
+            }
+        }
+    }
+
+    grouping action-instance {
+        description
+            "Specific a action instance whose metadata has been filled in.";
+
+        leaf action-name {
+            description
+                "A name for a action instance.";
+            type nemo-common:action-name;
+            mandatory true;
+        }
+
+        container parameter-values {
+            description
+                "The parameter value list of an action.";
+
+            list string-value {
+                key "value order";
+                leaf value {
+                    type string;
+                }
+
+                leaf order {
+                    type uint32;
+                }
+            }
+
+            list int-value {
+                key "value order";
+                leaf value {
+                    type int64;
+                }
+
+                leaf order {
+                    type uint32;
+                }
+            }
+
+            container range-value {
+                leaf min {
+                    type int64;
+                    mandatory true;
+                }
+
+                leaf max {
+                    type int64;
+                    mandatory true;
+                }
+            }
+        }
+    }
+
+    grouping operation-instance {
+        description
+            "Specific an operation instance whose metadata has been filled in.
+             Operation is a type of intent which refers to taking for some specific
+             actions to realize the purpose.";
+
+        leaf operation-id {
+            description
+                "A unique ID for a operation instance.";
+            type nemo-common:operation-id;
+            mandatory true;
+        }
+
+        leaf operation-name {
+            description
+                "A user-visible and unique name for a operation instance.";
+            type nemo-common:operation-name;
+            mandatory true;
+        }
+
+        leaf priority {
+            description
+                "Defines the priority of a operation instance.";
+            type uint32;
+            default 0;
+        }
+
+        leaf target-object {
+            description
+                "The target object which the operation instance will apply to.";
+            type nemo-common:object-id;
+            mandatory true;
+        }
+
+        uses condition-instance;
+
+        list action {
+            description
+                "The action list for the operation instance.";
+
+            key "action-name";
+            uses action-instance;
+
+            leaf order {
+                description
+                    "The order of an action instance in execution sequence.";
+                type uint32;
+            }
+
+            min-elements 1;
+        }
+    }
+}
diff --git a/nemo-api/src/main/yang/nemo-result.yang b/nemo-api/src/main/yang/nemo-result.yang
index b350c21..6daf69b 100644
--- a/nemo-api/src/main/yang/nemo-result.yang
+++ b/nemo-api/src/main/yang/nemo-result.yang
@@ -1,58 +1,23 @@
 /*
- * Copyright (c) 2015  Huawei Technologies Co., Ltd. and others.  All rights reserved.
+ * Copyright (c) 2015 Huawei, Inc. and others. All rights reserved.
  *
  * This program and the accompanying materials are made available under the
  * terms of the Eclipse Public License v1.0 which accompanies this distribution,
  * and is available at http://www.eclipse.org/legal/epl-v10.html
  */
 
-module nemo-result{
+module nemo-result {
+    yang-version 1;
 
-	yang-version 1;	
-	namespace "urn:opendaylight:params:xml:ns:yang:nemo:result";	
-	prefix "nemo-result";
-	
-	import nemo-common {prefix nemo-common;}
-	
-	revision "2015-06-29" {
+    namespace "urn:opendaylight:params:xml:ns:yang:nemo:result";
+    prefix "nemo-result";
+
+    import nemo-common {prefix nemo-common;}
+
+    revision "2015-10-10" {
         description
             "Initial revision.";
     }
-	
-	container expected-definitons{
-	
-	}	
-	
-	grouping expected-instance {
-		leaf expected-id {
-			type nemo-common:expected-instance-id;
-			mandatory true;
-		}
-		leaf expected-name{
-			type nemo-common:expected-instance-name;
-			mandatory false;
-		}
-		leaf expected-description {
-			type nemo-common:description;
-		}		
-	}
-	
-	container avoid-definitons{
-	
-	}
 
-	grouping avoid-instance {
-		leaf avoid-id {
-			type nemo-common:avoid-instance-id;
-			mandatory true;
-		}
-		leaf avoid-name{
-			type nemo-common:avoid-instance-name;
-			mandatory false;
-		}
-		leaf avoid-description {
-			type nemo-common:description;
-		}		
-	}
-	
-}
\ No newline at end of file
+    // TBD
+}
diff --git a/nemo-features/pom.xml b/nemo-features/pom.xml
index c678d52..e4db9ed 100644
--- a/nemo-features/pom.xml
+++ b/nemo-features/pom.xml
@@ -26,10 +26,11 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
   </prerequisites>
 
   <properties>
-    <controller.mdsal.version>1.3.0-SNAPSHOT</controller.mdsal.version>
     <mdsal.model.version>0.8.0-SNAPSHOT</mdsal.model.version>
+    <mdsal.version>1.3.0-SNAPSHOT</mdsal.version>
     <restconf.version>1.3.0-SNAPSHOT</restconf.version>
     <dlux.version>0.3.0-SNAPSHOT</dlux.version>
+	<openflowplugin.version>0.2.0-SNAPSHOT</openflowplugin.version>
   </properties>
 
   <dependencyManagement>
@@ -44,7 +45,7 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
       <dependency>
         <groupId>org.opendaylight.controller</groupId>
         <artifactId>mdsal-artifacts</artifactId>
-        <version>${controller.mdsal.version}</version>
+        <version>${mdsal.version}</version>
         <type>pom</type>
         <scope>import</scope>
       </dependency>
@@ -97,6 +98,22 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
       <type>xml</type>
       <scope>runtime</scope>
     </dependency>
+	
+	<dependency>
+      <groupId>org.opendaylight.openflowplugin</groupId>
+      <artifactId>features-openflowplugin</artifactId>
+	  <version>${openflowplugin.version}</version>
+      <classifier>features</classifier>
+      <type>xml</type>
+    </dependency>
+    <dependency>
+      <groupId>org.opendaylight.openflowplugin</groupId>
+      <artifactId>features-openflowplugin-extension</artifactId>
+      <version>${openflowplugin.version}</version>
+      <classifier>features</classifier>
+      <type>xml</type>
+    </dependency>
+	
     <dependency>
       <groupId>${project.groupId}</groupId>
       <artifactId>nemo-api</artifactId>
@@ -109,6 +126,13 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
     </dependency>
     <dependency>
       <groupId>${project.groupId}</groupId>
+      <artifactId>nemo-impl</artifactId>
+      <version>${project.version}</version>
+      <classifier>config</classifier>
+      <type>xml</type>
+    </dependency>
+    <dependency>
+      <groupId>${project.groupId}</groupId>
       <artifactId>openflow-renderer</artifactId>
       <version>${project.version}</version>
     </dependency>
@@ -121,6 +145,13 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
     </dependency>
     <dependency>
       <groupId>${project.groupId}</groupId>
+      <artifactId>openflow-renderer</artifactId>
+      <version>${project.version}</version>
+      <classifier>resource</classifier>
+      <type>json</type>
+    </dependency>
+    <dependency>
+      <groupId>${project.groupId}</groupId>
       <artifactId>nemo-ui</artifactId>
       <version>${project.version}</version>
     </dependency>
diff --git a/nemo-features/src/main/features/features.xml b/nemo-features/src/main/features/features.xml
index 4cec890..f14ab7c 100644
--- a/nemo-features/src/main/features/features.xml
+++ b/nemo-features/src/main/features/features.xml
@@ -9,28 +9,37 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://karaf.apache.org/xmlns/features/v1.2.0 http://karaf.apache.org/xmlns/features/v1.2.0">
   <repository>mvn:org.opendaylight.mdsal.model/features-mdsal-model/${mdsal.model.version}/xml/features</repository>
-  <repository>mvn:org.opendaylight.controller/features-mdsal/${controller.mdsal.version}/xml/features</repository>
+  <repository>mvn:org.opendaylight.controller/features-mdsal/${mdsal.version}/xml/features</repository>
   <repository>mvn:org.opendaylight.netconf/features-restconf/${restconf.version}/xml/features</repository>
   <repository>mvn:org.opendaylight.dlux/features-dlux/${dlux.version}/xml/features</repository>
+  <repository>mvn:org.opendaylight.openflowplugin/features-openflowplugin/${openflowplugin.version}/xml/features</repository>
+  <repository>mvn:org.opendaylight.openflowplugin/features-openflowplugin-extension/${openflowplugin.version}/xml/features</repository>
   <feature name='odl-nemo-api' version='${project.version}' description='OpenDaylight :: NEMO :: API'>
     <feature version='${mdsal.model.version}'>odl-mdsal-models</feature>
     <bundle>mvn:org.opendaylight.nemo/nemo-api/${project.version}</bundle>
   </feature>
   <feature name='odl-nemo-engine' version='${project.version}' description='OpenDaylight :: NEMO :: Engine'>
-    <feature version='${controller.mdsal.version}'>odl-mdsal-broker</feature>
+    <feature version='${mdsal.version}'>odl-mdsal-broker</feature>
     <feature version='${project.version}'>odl-nemo-api</feature>
     <bundle>mvn:org.opendaylight.nemo/nemo-impl/${project.version}</bundle>
+    <configfile finalname='etc/opendaylight/karaf/00-nemo-engine.xml'>mvn:org.opendaylight.nemo/nemo-impl/${project.version}/xml/config</configfile>
   </feature>
   <feature name='odl-nemo-engine-rest' version='${project.version}' description='OpenDaylight :: NEMO :: Engine :: REST'>
     <feature version='${restconf.version}'>odl-restconf</feature>
-    <feature version='${restconf.version}'>odl-mdsal-apidocs</feature>
-    <feature version='${controller.mdsal.version}'>odl-mdsal-xsql</feature>
+    <feature version='${mdsal.version}'>odl-mdsal-apidocs</feature>
+    <feature version='${mdsal.version}'>odl-mdsal-xsql</feature>
     <feature version='${project.version}'>odl-nemo-engine</feature>
   </feature>
   <feature name='odl-nemo-openflow-renderer' version='${project.version}' description='OpenDaylight :: NEMO :: OpenFlow Renderer'>
-    <feature version='${project.version}'>odl-nemo-engine</feature>
+    <feature version='${openflowplugin.version}'>odl-openflowplugin-flow-services</feature>
+    <feature version='${openflowplugin.version}'>odl-openflowplugin-nxm-extensions</feature>
+    <feature version='${project.version}'>odl-nemo-engine-rest</feature>
     <bundle>mvn:org.opendaylight.nemo/openflow-renderer/${project.version}</bundle>
-    <configfile finalname='etc/opendaylight/karaf/00-nemo-openflow-renderer.xml'>mvn:org.opendaylight.nemo/openflow-renderer/${project.version}/xml/config</configfile>
+    <configfile finalname='etc/opendaylight/karaf/01-nemo-openflow-renderer.xml'>mvn:org.opendaylight.nemo/openflow-renderer/${project.version}/xml/config</configfile>
+    <configfile finalname='etc/nemo/nemo-openflow-renderer-resource.json'>mvn:org.opendaylight.nemo/openflow-renderer/${project.version}/json/resource</configfile>
+  </feature>
+  <feature name='odl-nemo-cli-renderer' version='${project.version}' description='OpenDaylight :: NEMO :: CLI Renderer'>
+    <feature version='${project.version}'>odl-nemo-engine-rest</feature>
   </feature>
   <feature name='odl-nemo-engine-ui' version='${project.version}' description='OpenDaylight :: NEMO :: Engine :: UI'>
     <feature version='${dlux.version}'>odl-dlux-core</feature>
diff --git a/nemo-impl/pom.xml b/nemo-impl/pom.xml
index fdb8145..c66209c 100644
--- a/nemo-impl/pom.xml
+++ b/nemo-impl/pom.xml
@@ -10,9 +10,9 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>org.opendaylight.mdsal</groupId>
-    <artifactId>binding-parent</artifactId>
-    <version>0.8.0-SNAPSHOT</version>
+    <groupId>org.opendaylight.controller</groupId>
+    <artifactId>config-parent</artifactId>
+    <version>0.4.0-SNAPSHOT</version>
     <relativePath />
   </parent>
 
@@ -24,15 +24,49 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
 
   <properties>
     <jacoco.version>0.7.2.201409121644</jacoco.version>
+    <sonar.jacoco.reportPath>target/code-coverage/jacoco.exec</sonar.jacoco.reportPath>
+    <sonar.jacoco.itReportPath>target/code-coverage/jacoco-it.exec</sonar.jacoco.itReportPath>
   </properties>
 
   <dependencies>
     <dependency>
+      <groupId>org.opendaylight.mdsal.model</groupId>
+      <artifactId>ietf-inet-types</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.opendaylight.mdsal.model</groupId>
+      <artifactId>ietf-yang-types</artifactId>
+    </dependency>
+    <dependency>
       <groupId>${project.groupId}</groupId>
       <artifactId>nemo-api</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
+      <groupId>net.sourceforge.collections</groupId>
+      <artifactId>collections-generic</artifactId>
+      <version>4.01</version>
+    </dependency>
+    <dependency>
+      <groupId>net.sf.jung</groupId>
+      <artifactId>jung-api</artifactId>
+      <version>2.0.1</version>
+    </dependency>
+    <dependency>
+      <groupId>net.sf.jung</groupId>
+      <artifactId>jung-graph-impl</artifactId>
+      <version>2.0.1</version>
+    </dependency>
+    <dependency>
+      <groupId>net.sf.jung</groupId>
+      <artifactId>jung-algorithms</artifactId>
+      <version>2.0.1</version>
+    </dependency>
+    <dependency>
+      <groupId>com.google.guava</groupId>
+      <artifactId>guava</artifactId>
+    </dependency>
+    <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
     </dependency>
@@ -59,26 +93,101 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
     </pluginManagement>
     <plugins>
       <plugin>
-        <groupId>org.jacoco</groupId>
-        <artifactId>jacoco-maven-plugin</artifactId>
+        <groupId>org.opendaylight.yangtools</groupId>
+        <artifactId>yang-maven-plugin</artifactId>
+        <executions>
+          <execution>
+            <goals>
+              <goal>generate-sources</goal>
+            </goals>
+            <configuration>
+              <yangFilesRootDir>src/main/yang</yangFilesRootDir>
+              <codeGenerators>
+                <generator>
+                  <codeGeneratorClass>
+                    org.opendaylight.yangtools.maven.sal.api.gen.plugin.CodeGeneratorImpl
+                  </codeGeneratorClass>
+                  <outputBaseDir>
+                    ${salGeneratorPath}
+                  </outputBaseDir>
+                </generator>
+              </codeGenerators>
+              <inspectDependencies>true</inspectDependencies>
+            </configuration>
+          </execution>
+        </executions>
+        <dependencies>
+          <dependency>
+            <groupId>org.opendaylight.mdsal</groupId>
+            <artifactId>maven-sal-api-gen-plugin</artifactId>
+            <version>${yangtools.version}</version>
+            <type>jar</type>
+          </dependency>
+        </dependencies>
+      </plugin>
+      <plugin>
+        <groupId>org.apache.felix</groupId>
+        <artifactId>maven-bundle-plugin</artifactId>
+        <extensions>true</extensions>
         <configuration>
-          <includes>
-            <include>org.opendaylight.nemo.*</include>
-          </includes>
+          <instructions>
+            <Bundle-ClassPath>.,{maven-dependencies}</Bundle-ClassPath>
+            <Import-Package>*;resolution:=optional</Import-Package>
+            <Embed-Dependency>
+              collections-generic,jung-api,jung-graph-impl,jung-algorithms
+            </Embed-Dependency>
+            <Embed-Transitive>true</Embed-Transitive>
+            <Embed-Directory>lib</Embed-Directory>
+            <Embed-StripGroup>true</Embed-StripGroup>
+            <_failok>true</_failok>
+            <_nouses>true</_nouses>
+          </instructions>
+          <manifestLocation>${project.build.outputDirectory}/META-INF</manifestLocation>
         </configuration>
+      </plugin>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>build-helper-maven-plugin</artifactId>
+        <executions>
+          <execution>
+            <id>attach-artifacts</id>
+            <goals>
+              <goal>attach-artifact</goal>
+            </goals>
+            <phase>package</phase>
+            <configuration>
+              <artifacts>
+                <artifact>
+                  <file>${project.build.directory}/classes/etc/opendaylight/karaf/config.xml</file>
+                  <type>xml</type>
+                  <classifier>config</classifier>
+                </artifact>
+              </artifacts>
+            </configuration>
+          </execution>
+        </executions>
+      </plugin>
+      <plugin>
+        <groupId>org.jacoco</groupId>
+        <artifactId>jacoco-maven-plugin</artifactId>
         <executions>
           <execution>
-            <id>pre-test</id>
+            <id>pre-unit-test</id>
             <goals>
               <goal>prepare-agent</goal>
             </goals>
+            <configuration>
+              <destFile>${sonar.jacoco.reportPath}</destFile>
+            </configuration>
           </execution>
           <execution>
-            <id>post-test</id>
+            <id>post-unit-test</id>
             <goals>
               <goal>report</goal>
             </goals>
-            <phase>test</phase>
+            <configuration>
+              <dataFile>${sonar.jacoco.reportPath}</dataFile>
+            </configuration>
           </execution>
         </executions>
       </plugin>
diff --git a/nemo-impl/src/main/java/README b/nemo-impl/src/main/java/README
deleted file mode 100644
index e69de29..0000000
diff --git a/nemo-impl/src/test/java/README b/nemo-impl/src/test/java/README
deleted file mode 100644
index e69de29..0000000
diff --git a/nemo-karaf/pom.xml b/nemo-karaf/pom.xml
index 7f23a37..c5520cc 100644
--- a/nemo-karaf/pom.xml
+++ b/nemo-karaf/pom.xml
@@ -26,12 +26,8 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
   </prerequisites>
 
   <properties>
-    <feature.test.version>1.6.0-SNAPSHOT</feature.test.version>
     <feature.mdsal.version>1.3.0-SNAPSHOT</feature.mdsal.version>
     <feature.dlux.version>0.3.0-SNAPSHOT</feature.dlux.version>
-    <feature.flow.version>1.3.0-SNAPSHOT</feature.flow.version>
-    <feature.yangtools.version>0.8.0-SNAPSHOT</feature.yangtools.version>
-    <feature.adsal.version>0.10.0-SNAPSHOT</feature.adsal.version>
   </properties>
 
   <dependencyManagement>
@@ -61,14 +57,6 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
       <scope>runtime</scope>
     </dependency>
     <dependency>
-      <groupId>org.opendaylight.controller</groupId>
-      <artifactId>features-adsal</artifactId>
-      <classifier>features</classifier>
-      <version>${feature.adsal.version}</version>
-      <type>xml</type>
-      <scope>runtime</scope>
-    </dependency>
-    <dependency>
       <groupId>org.opendaylight.dlux</groupId>
       <artifactId>features-dlux</artifactId>
       <version>${feature.dlux.version}</version>
diff --git a/nemo-renderers/openflow-renderer/pom.xml b/nemo-renderers/openflow-renderer/pom.xml
index a88e190..ab0b3f5 100644
--- a/nemo-renderers/openflow-renderer/pom.xml
+++ b/nemo-renderers/openflow-renderer/pom.xml
@@ -24,9 +24,33 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
 
   <properties>
     <jacoco.version>0.7.2.201409121644</jacoco.version>
+    <sonar.jacoco.reportPath>target/code-coverage/jacoco.exec</sonar.jacoco.reportPath>
+    <sonar.jacoco.itReportPath>target/code-coverage/jacoco-it.exec</sonar.jacoco.itReportPath>
+    <openflowplugin.version>0.2.0-SNAPSHOT</openflowplugin.version>
+    <liblldp.version>0.10.0-SNAPSHOT</liblldp.version>
   </properties>
 
   <dependencies>
+    <!-- model dependencies -->
+    <dependency>
+      <groupId>org.opendaylight.mdsal.model</groupId>
+      <artifactId>yang-ext</artifactId>
+    </dependency>
+    <!-- project specific dependencies -->
+    <dependency>
+      <groupId>org.opendaylight.openflowplugin</groupId>
+      <artifactId>openflowplugin-extension-nicira</artifactId>
+      <version>${openflowplugin.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.opendaylight.controller</groupId>
+      <artifactId>liblldp</artifactId>
+      <version>${liblldp.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>commons-net</groupId>
+      <artifactId>commons-net</artifactId>
+    </dependency>
     <dependency>
       <groupId>${project.groupId}</groupId>
       <artifactId>nemo-api</artifactId>
@@ -38,6 +62,11 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
       <version>${project.version}</version>
     </dependency>
     <dependency>
+      <groupId>org.mockito</groupId>
+      <artifactId>mockito-all</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
     </dependency>
@@ -47,6 +76,18 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
       <scope>test</scope>
     </dependency>
     <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-core</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-databind</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-annotations</artifactId>
+    </dependency>
+    <dependency>
       <groupId>org.codehaus.jettison</groupId>
       <artifactId>jettison</artifactId>
     </dependency>
@@ -64,6 +105,19 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
     </pluginManagement>
     <plugins>
       <plugin>
+        <groupId>org.apache.felix</groupId>
+        <artifactId>maven-bundle-plugin</artifactId>
+        <configuration>
+          <instructions>
+            <Export-Package>org.codehaus.jackson,
+              org.codehaus.jackson.*,
+              org.joda.time.*,
+            </Export-Package>
+            <Import-Package>*</Import-Package>
+          </instructions>
+        </configuration>
+      </plugin>
+      <plugin>
         <groupId>org.opendaylight.yangtools</groupId>
         <artifactId>yang-maven-plugin</artifactId>
         <executions>
@@ -108,6 +162,11 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
             <phase>package</phase>
             <configuration>
               <artifacts>
+              	<artifact>
+                  <file>${project.build.directory}/classes/etc/nemo/resource.json</file>
+                  <type>json</type>
+                  <classifier>resource</classifier>
+                </artifact>
                 <artifact>
                   <file>${project.build.directory}/classes/etc/opendaylight/karaf/config.xml</file>
                   <type>xml</type>
@@ -128,17 +187,22 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
         </configuration>
         <executions>
           <execution>
-            <id>pre-test</id>
+            <id>pre-unit-test</id>
             <goals>
               <goal>prepare-agent</goal>
             </goals>
+            <configuration>
+              <destFile>${sonar.jacoco.reportPath}</destFile>
+            </configuration>
           </execution>
           <execution>
-            <id>post-test</id>
+            <id>post-unit-test</id>
             <goals>
               <goal>report</goal>
             </goals>
-            <phase>test</phase>
+            <configuration>
+              <dataFile>${sonar.jacoco.reportPath}</dataFile>
+            </configuration>
           </execution>
         </executions>
       </plugin>
diff --git a/nemo-renderers/openflow-renderer/src/main/java/README b/nemo-renderers/openflow-renderer/src/main/java/README
deleted file mode 100644
index e69de29..0000000
diff --git a/nemo-renderers/openflow-renderer/src/main/yang/openflow-renderer-impl.yang b/nemo-renderers/openflow-renderer/src/main/yang/openflow-renderer-impl.yang
index dc8b4d9..0a1637e 100644
--- a/nemo-renderers/openflow-renderer/src/main/yang/openflow-renderer-impl.yang
+++ b/nemo-renderers/openflow-renderer/src/main/yang/openflow-renderer-impl.yang
@@ -19,7 +19,7 @@ module openflow-renderer-impl {
         "This module contains the base YANG definitions for
          NEMO Openflow renderer implementation.";
 
-    revision "2015-07-01" {
+    revision "2015-10-10" {
         description
             "Initial revision.";
     }
diff --git a/nemo-renderers/openflow-renderer/src/test/java/README b/nemo-renderers/openflow-renderer/src/test/java/README
deleted file mode 100644
index e69de29..0000000
diff --git a/nemo-renderers/pom.xml b/nemo-renderers/pom.xml
index 7066dda..1024502 100644
--- a/nemo-renderers/pom.xml
+++ b/nemo-renderers/pom.xml
@@ -5,7 +5,8 @@ This program and the accompanying materials are made available under the
 terms of the Eclipse Public License v1.0 which accompanies this distribution,
 and is available at http://www.eclipse.org/legal/epl-v10.html
 -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
@@ -27,7 +28,7 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
   <scm>
     <connection>scm:git:ssh://git.opendaylight.org:29418/nemo.git</connection>
     <developerConnection>scm:git:ssh://git.opendaylight.org:29418/nemo.git</developerConnection>
-    <tag>HEAD</tag>
     <url>https://wiki.opendaylight.org/view/NEMO:Main</url>
+    <tag>HEAD</tag>
   </scm>
-</project>
+</project>
\ No newline at end of file
diff --git a/nemo-ui/src/main/resources/README b/nemo-ui/src/main/resources/README
deleted file mode 100644
index e69de29..0000000
diff --git a/pom.xml b/pom.xml
index 22b85c9..d898151 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,14 +5,15 @@ This program and the accompanying materials are made available under the
 terms of the Eclipse Public License v1.0 which accompanies this distribution,
 and is available at http://www.eclipse.org/legal/epl-v10.html
 -->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>org.opendaylight.controller</groupId>
-    <artifactId>releasepom</artifactId>
-    <version>0.3.0-SNAPSHOT</version>
-    <relativePath></relativePath>
+    <groupId>org.opendaylight.odlparent</groupId>
+    <artifactId>odlparent</artifactId>
+    <version>1.6.0-SNAPSHOT</version>
+    <relativePath />
   </parent>
 
   <groupId>org.opendaylight.nemo</groupId>
@@ -30,10 +31,10 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
     <module>nemo-artifacts</module>
     <module>nemo-api</module>
     <module>nemo-impl</module>
+    <module>nemo-renderers</module>
     <module>nemo-ui</module>
     <module>nemo-features</module>
     <module>nemo-karaf</module>
-    <module>nemo-renderers</module>
   </modules>
 
   <url>https://wiki.opendaylight.org/view/NEMO:Main</url>
@@ -58,7 +59,7 @@ and is available at http://www.eclipse.org/legal/epl-v10.html
   <scm>
     <connection>scm:git:ssh://git.opendaylight.org:29418/nemo.git</connection>
     <developerConnection>scm:git:ssh://git.opendaylight.org:29418/nemo.git</developerConnection>
-    <tag>HEAD</tag>
     <url>https://wiki.opendaylight.org/view/NEMO:Main</url>
+    <tag>HEAD</tag>
   </scm>
 </project>
